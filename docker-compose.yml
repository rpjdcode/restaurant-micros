version: '3'
services:
  mongodb-server:
    build:
      context: ./mongodb-server
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    networks:
      - restaurant-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=123456a

  mysql-server:
    env_file: "/mysql-server/mysql.env"
    build: 
      context: ./mysql-server
      dockerfile: Dockerfile
    ports:
      - "3307:3307"
    networks:
      - restaurant-network
    environment:
      - HEALTHCHECK_USER=${HEALTHCHECK_USER}
      - HEALTHCHECK_PASSWORD=${HEALTHCHECK_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "-h", "localhost", "-u", "${HEALTHCHECK_USER}", "-p${HEALTHCHECK_PASSWORD}", "ping"]
      interval: 20s
      timeout: 5s
      retries: 3
      
  zipkin:
    build:
      context: ./zipkin-server
      dockerfile: Dockerfile
    ports:
      - "9411:9411"
    depends_on:
      mysql-server:
        condition: service_healthy
      micro-eureka-discovery-server:
        condition: service_healthy
    networks:
      - restaurant-network

  # Servidor Vault
  vault:
    build:
      context: ./vault-server
      dockerfile: Dockerfile
    environment:
      VAULT_ADDR: http://vault:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL","sh /usr/local/bin/healthchecks.sh"]
      interval: 15s
      timeout: 5s
      retries: 10
    depends_on:
      mysql-server:
        condition: service_healthy
    networks:
      - restaurant-network

  # Servidor Keycloak
  keycloak:
    environment:
      - KEYCLOAK_SPI_SCRIPT_UPLOAD_ENABLED=true
    env_file: "/keycloak-server/keycloak.env"
    build:
      context: ./keycloak-server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      mysql-server:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
    # Healtcheck que comprobará el estado del servidor de Keycloak
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/master"]
      interval: 40s
      timeout: 10s
      retries: 3
    networks:
      - restaurant-network
 
 # MICROSERVICIOS
  
  # Config Server    
  micro-config-server:
    build:
      context: ./micro-config-server
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      SPRING_CLOUD_VAULT_HOST: vault
      SPRING_CLOUD_VAULT_URL: http://vault:8200
      SPRING_PROFILES_ACTIVE: docker
      VAULT_HOST: vault
    networks:
    - restaurant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # TODO: Se debería agregar un healhcheck para que compruebe el actuator
    depends_on:
      keycloak:
        condition: service_healthy
        
        
  # Eureka Discovery Server
  micro-eureka-discovery-server:
    build:
      context: ./micro-eureka-discovery-server
      dockerfile: Dockerfile 
    depends_on:
      - micro-config-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Gateway    
  micro-gateway-server:
    build:
      context: ./micro-gateway-server
      dockerfile: Dockerfile
    depends_on:
      micro-config-server:
        condition: service_healthy
      micro-eureka-discovery-server:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - restaurant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # MICROSERVICIO REACTIVO DE TESTING
  micro-reactivo-prueba:
    build:
      context: ./micro-reactivo-prueba
      dockerfile: Dockerfile
    depends_on:
      micro-gateway-server:
       condition: service_healthy
    ports:
      - "10000:10000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - restaurant-network
      
# REDES
networks:
  restaurant-network:
    driver: bridge
    
volumes:
  mysql-data:
   driver: local